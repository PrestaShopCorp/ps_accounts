name: Release and publish
on:
  release:
    types: [released, prereleased]
  push:
    branches:
      - feature/v3-ci-cd

jobs:
  build:
    name: Build the base artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Install composer dependencies
        run: composer install --no-dev -o

      - name: Clean-up project
        uses: PrestaShopCorp/github-action-clean-before-deploy@v1.0

      - name: Bump version
        run: |
          - VERSION=$(echo "3.3.0") make version
#          VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//') make version

      - name: Create & upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.event.repository.name }}
          path: ../

  upload_release_asset_production:
    name: Upload the production zip asset to the release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ github.event.repository.name }}

      - name: Gcloud auth and write env file
        run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS > /tmp/token.json
          gcloud auth activate-service-account --key-file=/tmp/token.json
          gcloud container clusters get-credentials $GCLOUD_CLUSTER \
          --zone europe-west1-c --project $GCLOUD_PROJECT
          gcloud beta secrets versions access latest --project=$GCLOUD_PROJECT --secret="accounts-module" > ${{ github.event.repository.name }}/config/config.yml
          rm /tmp/token.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIAL_PRODUCTION }}
          GCLOUD_TOKEN_PATH: ${{ env.GCLOUD_TOKEN_PATH }}
          GCLOUD_CLUSTER: ${{ secrets.GCLOUD_CLUSTER }}
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT_PRODUCTION }}

      - name: Prepare the production zip
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }} -x '*.git*'
        env:
          ENV_FILE: ${{ secrets.PS_ACCOUNTS_ENV_PROD }}

      - name: Publish the production zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}.zip
          asset_name: ${{ github.event.repository.name }}.zip
          asset_content_type: application/zip

  upload_release_asset_integration:
    name: Upload the integration zip asset to the release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ github.event.repository.name }}

      - name: Gcloud auth and write env file
        run: |
          echo $GOOGLE_APPLICATION_CREDENTIALS > /tmp/token.json
          gcloud auth activate-service-account --key-file=/tmp/token.json
          gcloud container clusters get-credentials $GCLOUD_CLUSTER \
          --zone europe-west1-c --project $GCLOUD_PROJECT
          gcloud beta secrets versions access latest --project=$GCLOUD_PROJECT --secret="accounts-module" > ${{ github.event.repository.name }}/config/config.yml
          rm /tmp/token.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIAL_INTEGRATION }}
          GCLOUD_TOKEN_PATH: ${{ env.GCLOUD_TOKEN_PATH }}
          GCLOUD_CLUSTER: ${{ secrets.GCLOUD_CLUSTER }}
          GCLOUD_PROJECT: ${{ secrets.GCLOUD_PROJECT_INTEGRATION }}

      - name: Prepare the integration zip
        run: |
          cd ${{ github.event.repository.name }}
          zip -r ${{ github.event.repository.name }}_integration.zip ${{ github.event.repository.name }}  -x '*.git*'

      - name: Publish the integration zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.repository.name }}/${{ github.event.repository.name }}_integration.zip
          asset_name: ${{ github.event.repository.name }}_integration.zip
          asset_content_type: application/zip

#  publish_to_marketplace:
#    name: Publish the module to the addons marketplace
#    runs-on: ubuntu-latest
#    needs: upload_release_asset_production
#    if: "!github.event.release.prerelease"
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2.0.0
#
#      - name: Download release asset
#        uses: dsaltares/fetch-gh-release-asset@0.0.5
#        with:
#          repo: ${{ github.event.repository.full_name }}
#          version: ${{ github.event.release.id }}
#          file: ${{ github.event.repository.name }}.zip
#          token: ${{ secrets.JARVIS_TOKEN }}
#
#      - name: Prepare publishing tool
#        run: |
#          composer global require prestashop/publish-on-marketplace
#
#      - name: Release zip
#        run: |
#          ~/.composer/vendor/bin/publish-on-marketplace --archive=$PWD/${{ github.event.repository.name }}.zip --metadata-json=$PWD/.github/mktp-metadata.json --changelog="${{ github.event.release.body }}" --debug
#        env:
#          MARKETPLACE_API_KEY: ${{ secrets.MARKETPLACE_API_KEY }}
