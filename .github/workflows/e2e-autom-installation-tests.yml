name: Account Module Installation autom tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1-5"

env:
  IMAGE_PREFIX: ghcr.io/prestashopcorp/

jobs:
  setup:
    name: Setup Playwright & Generate Envs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "node"
          cache: "npm"
          cache-dependency-path: e2e/package-lock.json

      - name: Install dependencies
        working-directory: ./e2e
        run: npm install

      - name: Install Playwright Browsers
        working-directory: ./e2e
        run: npx playwright install chromium

      - name: Upload node_modules
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: ./e2e/node_modules

      - name: Upload Playwright browsers cache
        uses: actions/upload-artifact@v4
        with:
          name: pw-browsers
          path: ~/.cache/ms-playwright

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: prestashopcorp
          password: ${{ secrets.DOWNLOADER_TOKEN }}

  run-test:
    name: Run Account tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        shop_version:
          - nightly-nginx
          - 8.2.0-8.1-fpm-alpine
          - 1.7.8.8-7.4-fpm-alpine
          - 1.6.1.24-7.1-fpm-alpine
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download node_modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: ./e2e/node_modules

      - name: Download Playwright browsers cache
        uses: actions/download-artifact@v4
        with:
          name: pw-browsers
          path: ~/.cache/ms-playwright

      - name: Generate .env in e2e
        working-directory: ./e2e
        run: |
          echo "BASE_URL=${{secrets.BASE_URL}}" >> .env
          echo "BASE_URL_FO=${{secrets.BASE_URL_FO}}" >> .env
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
          echo "OAUTH2URL=${{ secrets.OAUTH2URL }}" >> .env
          echo "ACCOUNTSAPIURL=${{ secrets.ACCOUNTSAPIURL }}" >> .env
          echo "ACCOUNTSUIURL=${{ secrets.ACCOUNTSUIURL }}" >> .env
          echo "QA_USER_AGENT=${{ secrets.QA_USER_AGENT}}" >> .env
          echo "ACCOUNT_EMAIL=${{ secrets.ACCOUNT_EMAIL}}" >> .env
          echo "ACCOUNT_PASSWORD=${{ secrets.ACCOUNT_PASSWORD}}" >> .env

      - name: Generate .env in e2e-env
        working-directory: ./e2e-env
        run: |
          echo "ACCOUNT_TAG=${{ secrets.ACCOUNT_TAG }}" >> .env
          echo "TUNNEL_SECRET=${{ secrets.TUNNEL_SECRET }}" >> .env
          echo "TUNNEL_ID=${{ secrets.TUNNEL_ID }}" >> .env
          echo "PS_DOMAIN=${{ secrets.PS_DOMAIN }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "DOWNLOADER_TOKEN=${{ secrets.DOWNLOADER_TOKEN }}" >> .env
          echo "PS_VERSION=${{ secrets.PS_VERSION }}" >> .env
          echo "PS_ACCOUNTS_VERSION=${{ secrets.PS_ACCOUNTS_VERSION }}" >> .env

      - name: Run test
        working-directory: ./e2e
        run: |
          npm run tnr -- ${{ matrix.shop_version  }}
          # npm run upgrade-tests -- ${{ matrix.shop_version  }}
        continue-on-error: true

      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.shop_version }}
          path: ./e2e/allure-results-${{ matrix.shop_version }}

  merge-allure:
    name: Merge Allure Results, Genreate Roprt & Send Slack notification
    needs: run-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: "actions/checkout@v4"

      - name: Install dependencies
        working-directory: ./e2e
        run: |
          npm install

      - name: Download all allure artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./e2e/

      - name: Merge Allure Results
        working-directory: ./e2e
        run: npm run merge-allure-results

      - name: Generate Allure Report
        working-directory: ./e2e
        run: npm run generate-allure-report
      
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: allure-report
          path: ./e2e/allure-report

  # notify-slack-qa:
  #   name: Send Slack Notification (qa channel)
  #   needs: merge-allure
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Allure Report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: allure-report
  #         path: ./e2e/allure-report

  #     - name: Build Slack message
  #       working-directory: ./e2e/allure-report/widgets
  #       run: |
  #         {
  #           echo "*R√©sultats des tests Account AUTOM :* \`${{ github.repository }}\`"
  #           echo
  #           jq -r '.items[] | "‚Ä¢ \(.name) : ‚úÖ \(.statistic.passed) / ‚ùå \(.statistic.failed) / ‚ö†Ô∏è \(.statistic.broken)"' suites.json
  #           echo
  #           echo "üìÑ Rapport Allure (Artifacts run) : <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ouvrir le run>"
  #           echo
  #           echo "1Ô∏è‚É£ T√©l√©chargez l'archive."
  #           echo "2Ô∏è‚É£ Installez Allure CLI."
  #           echo "3Ô∏è‚É£ \`allure open\`"
  #         } > slack_message.txt

  #     - name: Prepare payload
  #       working-directory: ./e2e/allure-report/widgets
  #       run: |
  #         msg=$(cat slack_message.txt | jq -Rs .)
  #         echo "{\"channel\": \"${{ secrets.SLACK_CHANNEL_QA }}\", \"text\": $msg}" > slack_payload.json

  #     - name: Send Slack Notification
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         method: chat.postMessage
  #         token: ${{ secrets.SLACK_BOT_TOKEN }}
  #         payload-file-path: ./e2e/allure-report/widgets/slack_payload.json

  notify-slack-account:
    name: Send Slack Notification (account channel)
    needs: merge-allure
    runs-on: ubuntu-latest
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./e2e/allure-report

      - name: Build Slack message
        working-directory: ./e2e/allure-report/widgets
        run: |
          {
            echo "*R√©sultats des tests Account AUTOM :* \`${{ github.repository }}\`"
            echo
            jq -r '.items[] | "‚Ä¢ \(.name) : ‚úÖ \(.statistic.passed) / ‚ùå \(.statistic.failed) / ‚ö†Ô∏è \(.statistic.broken)"' suites.json
            echo
            echo "üìÑ Rapport Allure (Artifacts run) : <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ouvrir le run>"
            echo
            echo "1Ô∏è‚É£ T√©l√©chargez l'archive."
            echo "2Ô∏è‚É£ Installez Allure CLI."
            echo "3Ô∏è‚É£ \`allure open\`"
          } > slack_message.txt

      - name: Prepare payload
        working-directory: ./e2e/allure-report/widgets
        run: |
          msg=$(cat slack_message.txt | jq -Rs .)
          echo "{\"channel\": \"${{ secrets.SLACK_CHANNEL_ACCOUNT }}\", \"text\": $msg}" > slack_payload.json

      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload-file-path: ./e2e/allure-report/widgets/slack_payload.json


