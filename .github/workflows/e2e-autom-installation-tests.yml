name: Account Module Installation autom tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 7 * * 1-5"

jobs:
  run-test:
    name: Run Account Back tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: "actions/checkout@v4"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "node"

      - name: Install dependencies
        working-directory: ./e2e
        run: |
          npm install

      - name: Install playwright browsers
        working-directory: ./e2e
        run: |
          npx playwright install

      - name: Generate .env in e2e file
        working-directory: ./e2e
        run: |
          echo "BASE_URL=${{secrets.BASE_URL}}" >> .env
          echo "BASE_URL_FO=${{secrets.BASE_URL_FO}}" >> .env
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
          echo "OAUTH2URL=${{ secrets.OAUTH2URL }}" >> .env
          echo "ACCOUNTSAPIURL=${{ secrets.ACCOUNTSAPIURL }}" >> .env
          echo "ACCOUNTSUIURL=${{ secrets.ACCOUNTSUIURL }}" >> .env

      - name: Generate .env in e2e-env file
        working-directory: ./e2e-env
        run: |
          echo "ACCOUNT_TAG=${{ secrets.ACCOUNT_TAG }}" >> .env
          echo "TUNNEL_SECRET=${{ secrets.TUNNEL_SECRET }}" >> .env
          echo "TUNNEL_ID=${{ secrets.TUNNEL_ID }}" >> .env
          echo "PS_DOMAIN=${{ secrets.PS_DOMAIN }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "DOWNLOADER_TOKEN=${{ secrets.DOWNLOADER_TOKEN }}" >> .env
          echo "PS_VERSION=${{ secrets.PS_VERSION }}" >> .env
          echo "PS_ACCOUNTS_VERSION=${{ secrets.PS_ACCOUNTS_VERSION }}" >> .env

      - name: Run test
        working-directory: ./e2e
        run: npm run test-all-version
        continue-on-error: true

      - name: Merge Allure Results
        working-directory: ./e2e
        run: npm run merge-allure-results

      - name: Generate Allure Report
        working-directory: ./e2e
        run: npm run generate-allure-report
      
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: Rapport-Allure-Account
          path: ./e2e/allure-report

      - name: Extract versioned results from Allure suites.json
        id: summary
        working-directory: ./e2e/allure-report/widgets
        run: |
          {
            echo "*R√©sultats des tests Account AUTOM :* \`${{ github.repository }}\`"
            echo
            jq -r '.items[] | "‚Ä¢ \(.name) : ‚úÖ \(.statistic.passed) / ‚ùå \(.statistic.failed) / ‚ö†Ô∏è \(.statistic.broken)"' suites.json
            echo
            echo "üîó <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Voir le run GitHub Actions>"
            echo
            echo "üìÑ Rapport Allure disponible dans les artifacts du run."
            echo "T√©l√©chargez l'archive, puis dans un terminal ex√©cutez :"
            echo "\`\`\`"
            echo "allure open ./allure-report"
            echo "\`\`\`"
          } > slack_message.txt

      - name: Prepare Slack payload
        run: |
          message=$(cat ./e2e/allure-report/widgets/slack_message.txt | jq -Rs .)
          echo "{\"channel\": \"${{ secrets.SLACK_CHANNEL_ID }}\", \"text\": $message}" > ./e2e/allure-report/widgets/slack_payload.json

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload-file-path: ./e2e/allure-report/widgets/slack_payload.json

