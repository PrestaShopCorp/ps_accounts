'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

<<<<<<< develop
function fs() {
  const data = _interopRequireWildcard(require('fs'));

  fs = function() {
=======
function _fs() {
  const data = _interopRequireDefault(require('fs'));

  _fs = function _fs() {
>>>>>>> Move ui directory
    return data;
  };

  return data;
}

<<<<<<< develop
function path() {
  const data = _interopRequireWildcard(require('path'));

  path = function() {
=======
function _path() {
  const data = _interopRequireDefault(require('path'));

  _path = function _path() {
>>>>>>> Move ui directory
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

<<<<<<< develop
  _chalk = function() {
=======
  _chalk = function _chalk() {
>>>>>>> Move ui directory
    return data;
  };

  return data;
}

function _prompts() {
  const data = _interopRequireDefault(require('prompts'));

<<<<<<< develop
  _prompts = function() {
=======
  _prompts = function _prompts() {
>>>>>>> Move ui directory
    return data;
  };

  return data;
}

function _realpathNative() {
  const data = require('realpath-native');

<<<<<<< develop
  _realpathNative = function() {
    return data;
  };

  return data;
}

function _jestConfig() {
  const data = require('jest-config');

  _jestConfig = function() {
=======
  _realpathNative = function _realpathNative() {
>>>>>>> Move ui directory
    return data;
  };

  return data;
}

var _questions = _interopRequireWildcard(require('./questions'));

var _errors = require('./errors');

<<<<<<< develop
=======
var _constants = require('./constants');

>>>>>>> Move ui directory
var _generate_config_file = _interopRequireDefault(
  require('./generate_config_file')
);

var _modify_package_json = _interopRequireDefault(
  require('./modify_package_json')
);

<<<<<<< develop
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null;
  var cache = new WeakMap();
  _getRequireWildcardCache = function() {
    return cache;
  };
  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache();
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}

/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const {
  JEST_CONFIG_BASE_NAME,
  JEST_CONFIG_EXT_MJS,
  JEST_CONFIG_EXT_JS,
  JEST_CONFIG_EXT_ORDER,
  PACKAGE_JSON
} = _jestConfig().constants;

const getConfigFilename = ext => JEST_CONFIG_BASE_NAME + ext;

var _default = async (rootDir = (0, _realpathNative().sync)(process.cwd())) => {
  // prerequisite checks
  const projectPackageJsonPath = path().join(rootDir, PACKAGE_JSON);

  if (!fs().existsSync(projectPackageJsonPath)) {
    throw new _errors.NotFoundPackageJsonError(rootDir);
  }

  const questions = _questions.default.slice(0);

  let hasJestProperty = false;
  let projectPackageJson;

  try {
    projectPackageJson = JSON.parse(
      fs().readFileSync(projectPackageJsonPath, 'utf-8')
    );
  } catch (error) {
    throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);
  }

  if (projectPackageJson.jest) {
    hasJestProperty = true;
  }

  const existingJestConfigPath = JEST_CONFIG_EXT_ORDER.find(ext =>
    fs().existsSync(path().join(rootDir, getConfigFilename(ext)))
  );
  const jestConfigPath =
    existingJestConfigPath ||
    path().join(
      rootDir,
      getConfigFilename(
        projectPackageJson.type === 'module'
          ? JEST_CONFIG_EXT_MJS
          : JEST_CONFIG_EXT_JS
      )
    );

  if (hasJestProperty || existingJestConfigPath) {
    const result = await (0, _prompts().default)({
      initial: true,
      message:
        'It seems that you already have a jest configuration, do you want to override it?',
      name: 'continue',
      type: 'confirm'
    });

    if (!result.continue) {
      console.log();
      console.log('Aborting...');
      return;
    }
  } // Add test script installation only if needed

  if (
    !projectPackageJson.scripts ||
    projectPackageJson.scripts.test !== 'jest'
  ) {
    questions.unshift(_questions.testScriptQuestion);
  } // Start the init process

  console.log();
  console.log(
    _chalk().default.underline(
      `The following questions will help Jest to create a suitable configuration for your project\n`
    )
  );
  let promptAborted = false; // @ts-ignore: Return type cannot be object - faulty typings

  const results = await (0, _prompts().default)(questions, {
    onCancel: () => {
      promptAborted = true;
    }
  });

  if (promptAborted) {
    console.log();
    console.log('Aborting...');
    return;
  }

  const shouldModifyScripts = results.scripts;

  if (shouldModifyScripts || hasJestProperty) {
    const modifiedPackageJson = (0, _modify_package_json.default)({
      projectPackageJson,
      shouldModifyScripts
    });
    fs().writeFileSync(projectPackageJsonPath, modifiedPackageJson);
    console.log('');
    console.log(
      `‚úèÔ∏è  Modified ${_chalk().default.cyan(projectPackageJsonPath)}`
    );
  }

  const generatedConfig = (0, _generate_config_file.default)(
    results,
    projectPackageJson.type === 'module' ||
      jestConfigPath.endsWith(JEST_CONFIG_EXT_MJS)
  );
  fs().writeFileSync(jestConfigPath, generatedConfig);
  console.log('');
  console.log(
    `üìù  Configuration file created at ${_chalk().default.cyan(jestConfigPath)}`
  );
};
=======
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc =
            Object.defineProperty && Object.getOwnPropertyDescriptor
              ? Object.getOwnPropertyDescriptor(obj, key)
              : {};
          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }
    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function() {
    var self = this,
      args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
      }
      _next(undefined);
    });
  };
}

var _default =
  /*#__PURE__*/
  (function() {
    var _ref = _asyncToGenerator(function*(
      rootDir = (0, _realpathNative().sync)(process.cwd())
    ) {
      // prerequisite checks
      const projectPackageJsonPath = _path().default.join(
        rootDir,
        _constants.PACKAGE_JSON
      );

      const jestConfigPath = _path().default.join(
        rootDir,
        _constants.JEST_CONFIG
      );

      if (!_fs().default.existsSync(projectPackageJsonPath)) {
        throw new _errors.NotFoundPackageJsonError(rootDir);
      }

      const questions = _questions.default.slice(0);

      let hasJestProperty = false;
      let hasJestConfig = false;
      let projectPackageJson;

      try {
        projectPackageJson = JSON.parse(
          _fs().default.readFileSync(projectPackageJsonPath, 'utf-8')
        );
      } catch (error) {
        throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);
      }

      if (projectPackageJson.jest) {
        hasJestProperty = true;
      }

      if (_fs().default.existsSync(jestConfigPath)) {
        hasJestConfig = true;
      }

      if (hasJestProperty || hasJestConfig) {
        const result = yield (0, _prompts().default)({
          initial: true,
          message:
            'It seems that you already have a jest configuration, do you want to override it?',
          name: 'continue',
          type: 'confirm'
        });

        if (!result.continue) {
          console.log();
          console.log('Aborting...');
          return;
        }
      } // Add test script installation only if needed

      if (
        !projectPackageJson.scripts ||
        projectPackageJson.scripts.test !== 'jest'
      ) {
        questions.unshift(_questions.testScriptQuestion);
      } // Start the init process

      console.log();
      console.log(
        _chalk().default.underline(
          `The following questions will help Jest to create a suitable configuration for your project\n`
        )
      );
      let promptAborted = false; // @ts-ignore: Return type cannot be object - faulty typings

      const results = yield (0, _prompts().default)(questions, {
        onCancel: () => {
          promptAborted = true;
        }
      });

      if (promptAborted) {
        console.log();
        console.log('Aborting...');
        return;
      }

      const shouldModifyScripts = results.scripts;

      if (shouldModifyScripts || hasJestProperty) {
        const modifiedPackageJson = (0, _modify_package_json.default)({
          projectPackageJson,
          shouldModifyScripts
        });

        _fs().default.writeFileSync(
          projectPackageJsonPath,
          modifiedPackageJson
        );

        console.log('');
        console.log(
          `‚úèÔ∏è  Modified ${_chalk().default.cyan(projectPackageJsonPath)}`
        );
      }

      const generatedConfig = (0, _generate_config_file.default)(results);

      _fs().default.writeFileSync(jestConfigPath, generatedConfig);

      console.log('');
      console.log(
        `üìù  Configuration file created at ${_chalk().default.cyan(
          jestConfigPath
        )}`
      );
    });

    return function() {
      return _ref.apply(this, arguments);
    };
  })();
>>>>>>> Move ui directory

exports.default = _default;
